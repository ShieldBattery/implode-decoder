var Transform = require('stream').Transform
  , inherits = require('inherits')

function createDecoderStream() {
  return new Decoder()
}

var STATE_HEADER = 0
  , STATE_DECODE = 1
  , STATE_ERROR = 666
var CT_BINARY = 0
  , CT_ASCII = 1

inherits(Decoder, Transform)
function Decoder() {
  Transform.call(this)

  this.state = STATE_HEADER
  this.compressionType = -1
  this.dictionarySizeBits = -1
  this.dictionarySizeMask = 0xFFFF
  this.bitBuffer = -1
  this.extraBits = -1

  this.headerBuffer = null
  this.workBuffer = null
  this.workPos = -1
  this.decodeCb = null

  if (!Decoder.lengthCodes) {
    Decoder.lengthCodes = genDecodeTables(lenCode, lenBits)
  }
  this.lengthCodes = Decoder.lengthCodes

  if (!Decoder.distPosCodes) {
    Decoder.distPosCodes = genDecodeTables(distCode, distBits)
  }
  this.distPosCodes = Decoder.distPosCodes
}

Decoder.prototype._transform = function(block, encoding, done) {
  var pos = 0
  if (this.state == STATE_HEADER) {
    pos = this.readHeader(block)
    if (pos && this.headerBuffer) {
      block = this.headerBuffer
      this.headerBuffer = null
    }
  }

  if (this.state == STATE_DECODE) {
    // We have two possible states:
    // State 1) This is our first decode. In this case, we simply call decode
    //
    // State 2) This is a second or later decode, meaning something is waiting on bytes to continue
    // decoding. The thing that is waiting will leave a hanging callback in decodeCb, so we call
    // that with the new bytes (and remove the callback)
    if (this.decodeCb) {
      var cb = this.decodeCb
      this.decodeCb = null
      cb(block, pos)
    } else {
      this.decode(block, pos)
    }
  }

  done()
}

Decoder.prototype._flush = function(done) {
  if (this.state == STATE_HEADER) {
    return done(new Error('Not enough data to decode'))
  }

  if (this.state == STATE_DECODE && this.decodeCb) {
    var cb = this.decodeCb
    this.decodeCb = null
    cb(null)
  }

  if (this.state == STATE_DECODE && this.workPos > 0x1000) {
    // Flush the remaining decoded bytes
    var output = new Buffer(this.workPos - 0x1000)
    this.workBuffer.copy(output, 0, 0x1000, this.workPos)
    this.push(output)
  }

  this.headerBuffer = null
  this.workBuffer = null
  done()
}

Decoder.prototype.readHeader = function(block) {
  this.headerBuffer = this.headerBuffer ? Buffer.concat([ this.headerBuffer, block ]) : block
  if (this.headerBuffer.length < 3) {
    return 0
  }

  this.compressionType = this.headerBuffer.readUInt8(0)
  this.dictionarySizeBits = this.headerBuffer.readUInt8(1)
  this.bitBuffer = this.headerBuffer.readUInt8(2)
  this.extraBits = 0
  this.dictionarySizeMask = 0xFFFF >> (0x10 - this.dictionarySizeBits)

  if (this.compressionType != CT_BINARY && this.compressionType != CT_ASCII) {
    this.emit('error', new Error('Unsupported compression type: ' + this.compressionType))
    this.state = STATE_ERROR
    return 0
  }
  if (this.dictionarySizeBits < 4 || this.dictionarySizeBits > 6) {
    this.emit('error', new Error('Unsupported dictionary size: ' + this.dictionarySizeBits))
    this.state = STATE_ERROR
    return 0
  }

  this.state = STATE_DECODE
  // TODO(tec27): I'm fairly certain this buffer can be sized down (or at the very least, handled
  // differently to avoid copying a lot of data around in it)
  this.workBuffer = new Buffer(0x2203)
  this.workPos = 0x1000
  return 3
}

Decoder.prototype.decode = function(block, pos) {
  var r = {
    block: block,
    pos: pos,
    err: false
  }
  var nextLiteral

  // Decode a literal from the input data
  // The return value can either be an uncompressed byte (< 0x100) or an encoded length of the
  // repeating byte sequence that is to be copied to the current buffer position
  while((nextLiteral = this.decodeLiteral(r)) < 0x305) {
    // literal of 0x100 means repeating sequence of 0x2 bytes
    // literal of 0x101 means repeating  sequence of 0x3 bytes
    // ...
    // literal of 0x304 means repeating sequence of 0x206 bytes
    if (nextLiteral >= 0x100) {
      var repetitionLength = nextLiteral - 0xFE
        , minusDistance = this.decodeDistance(r, repetitionLength)
      if (r.err) {
        nextLiteral = 0x306
        break
      }

      var src = this.workPos - minusDistance
      this.workBuffer.copy(this.workBuffer, this.workPos, src, src + repetitionLength)
      this.workPos += repetitionLength
    } else {
      this.workBuffer[this.workPos] = nextLiteral
      this.workPos++
    }

    if (this.workPos >= 0x2000) {
      // Output the 1000 bytes we've decoded
      var output = new Buffer(0x1000)
      this.workBuffer.copy(output, 0, 0x1000, 0x2000)
      this.push(output)

      // Copy the decoded data back around to the first half of the buffer, needed because the
      // decoding might reuse some of them as repetitions. Note that if the buffer overflowed
      // previously (into the 0x200ish-odd byte section at the end), the extra data will now be in
      // the "active" area of the buffer, ready to be output when the next flush happens
      this.workBuffer.copy(this.workBuffer, 0, 0x1000, this.workPos - 0x1000)
      this.workPos -= 0x1000
    }
  }

  if (nextLiteral == 0x306) {
    this.state = STATE_ERROR
    return
  }
}

Decoder.prototype.decodeLiteral = function(r) {
  // Test the current bit in the buffer. If it is not set, simply return the next 8 bits
  if (this.bitBuffer & 1) {
    this.readBits(r, 1)
    if (r.err) {
      return 0x306
    }

    // The next 8 bits hold the index to the length code table
    var lengthCode = this.lengthCodes[this.bitBuffer & 0xFF]
    // Discard the appropriate number of bits
    this.readBits(r, lenBits[lengthCode])
    if (r.err) {
      return 0x306
    }

    // Check if there are some extra bits for this length code
    var extraLengthBits = exLenBits[lengthCode]
    if (extraLengthBits) {
      var extraLength = this.bitBuffer & ((1 << extraLengthBits) - 1)

      this.readBits(r, extraLengthBits)
      if (r.err) {
        if (lengthCode + extraLength != 0x10E) {
          return 0x306
        } else {
          r.err = false
        }
      }
      lengthCode = lenBase[lengthCode] + extraLength
    }

    return lengthCode + 0x100
  }

  this.readBits(r, 1)
  if (r.err) {
    return 0x306
  }

  var result
  // If this is binary compression, read 8 bits and return them
  if (this.compressionType == CT_BINARY) {
    result = this.bitBuffer & 0xFF
    this.readBits(r, 8)
    if (r.err) {
      return 0x306
    }
    return result
  }

  // With ASCII, the decoding is slightly different
  if (this.bitBuffer & 0xFF) {
    result = this.asciiTable2C34[this.bitBuffer & 0xFF]
    if (result == 0xFF) {
      if (this.bitBuffer & 0x3F) {
        this.readBits(r, 4)
        if (r.err) {
          return 0x306
        }

        result = this.asciiTable2D34[this.bitBuffer & 0xFF]
      } else {
        this.readBits(r, 6)
        if (r.err) {
          return 0x306
        }

        result = this.asciiTable2E34[this.bitBuffer & 0x7F]
      }
    }
  } else {
    this.readBits(r, 8)
    if (r.err) {
      return 0x306
    }

    result = this.asciiTable2EB4[this.bitBuffer & 0xFF]
  }

  this.readBits(r, chBitsAsc[result])
  return r.err ? 0x306 : result
}

// Decodes the distance of a reptition, backwards relative to the current output buffer position
Decoder.prototype.decodeDistance = function(r, repetitionLength) {
  var distPosCode = this.distPosCodes[this.bitBuffer & 0xFF]
    , distPosBits = distBits[distPosCode]
    , distance
  this.readBits(r, distPosBits)
  if (r.err) {
    return 0
  }

  if (repetitionLength == 2) {
    // If the repetition is only 2 bytes in length, then take 2 bits from the stream in order to get
    // the distance
    distance = (distPosCode << 2) | (this.bitBuffer & 0x03)
    this.readBits(r, 2)
    if (r.err) {
      return 0
    }
  } else {
    // If the repetition is more than 2 bytes in length, then take dictionarySizeBits bits in order
    // to get the distance
    distance = (distPosCode << this.dictionarySizeBits) | (this.bitBuffer & this.dictionarySizeMask)
    this.readBits(r, this.dictionarySizeBits)
    if (r.err) {
      return 0
    }
  }

  return distance + 1
}

// Reads a number of new bits into the bit buffer, discarding old bits in the
// process. New bytes will be read onto the high side of the buffer from the
// current block as needed. This function assumes numBits <= 8
Decoder.prototype.readBits = function(r, numBits) {
  if (numBits <= this.extraBits) {
    // we already have enough bits in the bit buffer, just shift
    this.extraBits -= numBits
    this.bitBuffer >>= numBits
    return
  }

  // Align the extra bits with the high edge of the active byte
  this.bitBuffer >>= this.extraBits
  if (r.pos == r.block.length) {
    // We don't have enough data in this block to fill the necessary bits
    // TODO(tec27): handle this better :)
    console.log('OH FUCK WE NEED MORE DATA')
    r.err = true
    return
  }

  // Place the new byte in the second byte of the bitBuffer
  this.bitBuffer |= r.block[r.pos] << 8
  r.pos++
  // Shift the bytes down the last necessary part
  this.bitBuffer >>= numBits - this.extraBits
  this.extraBits = (this.extraBits - numBits) + 8
  return
}

function genDecodeTables(startIndexes, lengthBits) {
  var result = []

  var i, j, length
  for (i = 0; i < startIndexes.length; i++) {
    length = 1 << lengthBits[i]
    for (j = startIndexes[i]; j < 0x100; j+= length) {
      result[j] = i
    }
  }

  return result
}

var distBits = [
  0x02, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
  0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08
]

var distCode = [
  0x03, 0x0D, 0x05, 0x19, 0x09, 0x11, 0x01, 0x3E, 0x1E, 0x2E, 0x0E, 0x36, 0x16, 0x26, 0x06, 0x3A,
  0x1A, 0x2A, 0x0A, 0x32, 0x12, 0x22, 0x42, 0x02, 0x7C, 0x3C, 0x5C, 0x1C, 0x6C, 0x2C, 0x4C, 0x0C,
  0x74, 0x34, 0x54, 0x14, 0x64, 0x24, 0x44, 0x04, 0x78, 0x38, 0x58, 0x18, 0x68, 0x28, 0x48, 0x08,
  0xF0, 0x70, 0xB0, 0x30, 0xD0, 0x50, 0x90, 0x10, 0xE0, 0x60, 0xA0, 0x20, 0xC0, 0x40, 0x80, 0x00
]

var exLenBits = [
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
]

var lenBase = [
  0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
  0x0008, 0x000A, 0x000E, 0x0016, 0x0026, 0x0046, 0x0086, 0x0106
]

var lenBits = [
  0x03, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x07, 0x07
]

var lenCode = [
  0x05, 0x03, 0x01, 0x06, 0x0A, 0x02, 0x0C, 0x14, 0x04, 0x18, 0x08, 0x30, 0x10, 0x20, 0x40, 0x00
]

var chBitsAsc = [
  0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x08, 0x07, 0x0C, 0x0C, 0x07, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x04, 0x0A, 0x08, 0x0C, 0x0A, 0x0C, 0x0A, 0x08, 0x07, 0x07, 0x08, 0x09, 0x07, 0x06, 0x07, 0x08,
  0x07, 0x06, 0x07, 0x07, 0x07, 0x07, 0x08, 0x07, 0x07, 0x08, 0x08, 0x0C, 0x0B, 0x07, 0x09, 0x0B,
  0x0C, 0x06, 0x07, 0x06, 0x06, 0x05, 0x07, 0x08, 0x08, 0x06, 0x0B, 0x09, 0x06, 0x07, 0x06, 0x06,
  0x07, 0x0B, 0x06, 0x06, 0x06, 0x07, 0x09, 0x08, 0x09, 0x09, 0x0B, 0x08, 0x0B, 0x09, 0x0C, 0x08,
  0x0C, 0x05, 0x06, 0x06, 0x06, 0x05, 0x06, 0x06, 0x06, 0x05, 0x0B, 0x07, 0x05, 0x06, 0x05, 0x05,
  0x06, 0x0A, 0x05, 0x05, 0x05, 0x05, 0x08, 0x07, 0x08, 0x08, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C,
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
  0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0D, 0x0C, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D,
  0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D
]

var chCodeAsc = [
  0x0490, 0x0FE0, 0x07E0, 0x0BE0, 0x03E0, 0x0DE0, 0x05E0, 0x09E0,
  0x01E0, 0x00B8, 0x0062, 0x0EE0, 0x06E0, 0x0022, 0x0AE0, 0x02E0,
  0x0CE0, 0x04E0, 0x08E0, 0x00E0, 0x0F60, 0x0760, 0x0B60, 0x0360,
  0x0D60, 0x0560, 0x1240, 0x0960, 0x0160, 0x0E60, 0x0660, 0x0A60,
  0x000F, 0x0250, 0x0038, 0x0260, 0x0050, 0x0C60, 0x0390, 0x00D8,
  0x0042, 0x0002, 0x0058, 0x01B0, 0x007C, 0x0029, 0x003C, 0x0098,
  0x005C, 0x0009, 0x001C, 0x006C, 0x002C, 0x004C, 0x0018, 0x000C,
  0x0074, 0x00E8, 0x0068, 0x0460, 0x0090, 0x0034, 0x00B0, 0x0710,
  0x0860, 0x0031, 0x0054, 0x0011, 0x0021, 0x0017, 0x0014, 0x00A8,
  0x0028, 0x0001, 0x0310, 0x0130, 0x003E, 0x0064, 0x001E, 0x002E,
  0x0024, 0x0510, 0x000E, 0x0036, 0x0016, 0x0044, 0x0030, 0x00C8,
  0x01D0, 0x00D0, 0x0110, 0x0048, 0x0610, 0x0150, 0x0060, 0x0088,
  0x0FA0, 0x0007, 0x0026, 0x0006, 0x003A, 0x001B, 0x001A, 0x002A,
  0x000A, 0x000B, 0x0210, 0x0004, 0x0013, 0x0032, 0x0003, 0x001D,
  0x0012, 0x0190, 0x000D, 0x0015, 0x0005, 0x0019, 0x0008, 0x0078,
  0x00F0, 0x0070, 0x0290, 0x0410, 0x0010, 0x07A0, 0x0BA0, 0x03A0,
  0x0240, 0x1C40, 0x0C40, 0x1440, 0x0440, 0x1840, 0x0840, 0x1040,
  0x0040, 0x1F80, 0x0F80, 0x1780, 0x0780, 0x1B80, 0x0B80, 0x1380,
  0x0380, 0x1D80, 0x0D80, 0x1580, 0x0580, 0x1980, 0x0980, 0x1180,
  0x0180, 0x1E80, 0x0E80, 0x1680, 0x0680, 0x1A80, 0x0A80, 0x1280,
  0x0280, 0x1C80, 0x0C80, 0x1480, 0x0480, 0x1880, 0x0880, 0x1080,
  0x0080, 0x1F00, 0x0F00, 0x1700, 0x0700, 0x1B00, 0x0B00, 0x1300,
  0x0DA0, 0x05A0, 0x09A0, 0x01A0, 0x0EA0, 0x06A0, 0x0AA0, 0x02A0,
  0x0CA0, 0x04A0, 0x08A0, 0x00A0, 0x0F20, 0x0720, 0x0B20, 0x0320,
  0x0D20, 0x0520, 0x0920, 0x0120, 0x0E20, 0x0620, 0x0A20, 0x0220,
  0x0C20, 0x0420, 0x0820, 0x0020, 0x0FC0, 0x07C0, 0x0BC0, 0x03C0,
  0x0DC0, 0x05C0, 0x09C0, 0x01C0, 0x0EC0, 0x06C0, 0x0AC0, 0x02C0,
  0x0CC0, 0x04C0, 0x08C0, 0x00C0, 0x0F40, 0x0740, 0x0B40, 0x0340,
  0x0300, 0x0D40, 0x1D00, 0x0D00, 0x1500, 0x0540, 0x0500, 0x1900,
  0x0900, 0x0940, 0x1100, 0x0100, 0x1E00, 0x0E00, 0x0140, 0x1600,
  0x0600, 0x1A00, 0x0E40, 0x0640, 0x0A40, 0x0A00, 0x1200, 0x0200,
  0x1C00, 0x0C00, 0x1400, 0x0400, 0x1800, 0x0800, 0x1000, 0x0000
]

module.exports = createDecoderStream
